import { Key } from '../entity/key.entity';
import { Tariff } from '../entity/tariff.entity';
import { AuthorizedUser } from '../entity/authorizedUser.entity';
import { NonAuthorizedUser } from '../entity/nonAuthorizedUser.entity';
import { TariffService } from '../services/tariff.service';
import { AuthorizedUserService } from '../services/authorizedUser.service';
import { NonAuthorizedUserService } from '../services/nonAuthorizedUser.service';
import { Keyboard } from './keyboard.type';
import { KeyTools } from '../tools/key.tools';
import { NetTools } from '../tools/net.tools';
 
export class DynamicKeyboards {
  private readonly tariffService: TariffService = new TariffService();
  private readonly authorizedUserService: AuthorizedUserService = new AuthorizedUserService();
  private readonly nonAuthorizedUserService: NonAuthorizedUserService = new NonAuthorizedUserService();
  private readonly keyTools: KeyTools = new KeyTools();
  private readonly netTools: NetTools = new NetTools();

  sumToUpBalance(tg: string): Keyboard {
    const keyboard = { 
      reply_markup: {
        inline_keyboard: [
          [
            { 
              text: '100 —Ä—É–±.', 
              callback_data: `balance-100`, 
            },
            { 
              text: '300 —Ä—É–±.', 
              callback_data: `balance-300`, 
            },
          ],
          [
            { 
              text: '500 —Ä—É–±.', 
              callback_data: `balance-500`, 
            },
            { 
              text: '1000 —Ä—É–±.', 
              callback_data: `balance-1000}`,
            },
          ],
          [
            { 
              text: '1500 —Ä—É–±.', 
              callback_data: `balance-1500` ,
            },
            { 
              text: '3000 —Ä—É–±.', 
              callback_data: `balance-3000`, 
            },
          ],
          [
            { 
              text: '–î—Ä—É–≥–∞—è —Å—É–º–º–∞', 
              callback_data: 'fingerPrint', 
            },
          ],
          [
            { 
              text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', 
              callback_data: 'back‚¨ÖÔ∏è',
            },
          ],
        ],
      },
    };

    return keyboard;
  }

  tariffPriceKeyboard(tariff: Tariff, user: AuthorizedUser | NonAuthorizedUser): Keyboard {
    const tariffName = tariff.name;
    const oneDayPrice = tariff.price;
    const keyboard = {
      reply_markup: {
        inline_keyboard: [],
      },
    };
    const prices = {
      week: {
        price: oneDayPrice * 7,
        callback: `buy-${tariffName}-7`,
        mark: 'week',
      },
      twoWeeks: {
        price: oneDayPrice * 14,
        callback: `buy-${tariffName}-14`,
        mark: 'two_weeks',
      },

      month: {
        price: oneDayPrice * 30,
        callback: `buy-${tariffName}-30`,
        mark: 'month',
      },
    };

    Object.values(prices).forEach((val) => {
      if (user.balance > val.price) {
        if (val.mark === 'week') {
          keyboard.reply_markup.inline_keyboard.push(
            [
              {
                text: `–ù–µ–¥–µ–ª—è - ${val.price} —Ä—É–±–ª–µ–π`,
                callback_data: val.callback,
              },
            ],
          );
        }
        if (val.mark === 'two_weeks') {
          keyboard.reply_markup.inline_keyboard.push(
            [
              {
                text: `–î–≤–µ –Ω–µ–¥–µ–ª–∏ ${val.price} —Ä—É–±–ª–µ–π`,
                callback_data: val.callback,
              },
            ],
          );
        }  
        if (val.mark === 'month') {
          keyboard.reply_markup.inline_keyboard.push(
            [
              {
                text: `–ú–µ—Å—è—Ü - ${val.price} —Ä—É–±–ª–µ–π`,
                callback_data: val.callback,
              },
            ],
          );
        }
      } else {
        if (val.mark === 'week') {
          keyboard.reply_markup.inline_keyboard.push(
            [
              {
                text: `–ù–µ–¥–µ–ª—è - ${val.price} —Ä—É–±–ª–µ–π (–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)`,
                callback_data: 'empty callback',
              },
            ],
          );
        }
        if (val.mark === 'two_weeks') {
          keyboard.reply_markup.inline_keyboard.push(
            [
              {
                text: `–î–≤–µ –Ω–µ–¥–µ–ª–∏ ${val.price} —Ä—É–±–ª–µ–π (–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)`,
                callback_data: 'empty callback',
              },
            ],
          );
        }  
        if (val.mark === 'month') {
          keyboard.reply_markup.inline_keyboard.push(
            [
              {
                text: `–ú–µ—Å—è—Ü - ${val.price} —Ä—É–±–ª–µ–π (–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)`,
                callback_data: 'empty callback',
              },
            ],
          );
        }
      }    
    });

    keyboard.reply_markup.inline_keyboard.push([
      {
        text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥‚¨ÖÔ∏è',
        callback_data: 'chooseTariff',
      },
    ]);

    return keyboard;
  }

  async chooseTariffKeyboard(): Promise<Keyboard> {
    const tariffs = await this.tariffService.findAll();
    const rawButtons = tariffs.map((tariff) => [
      { 
        text: tariff.name,
        callback_data: `purchase-${tariff.name}`,
      },
    ]);
    
    return {
      reply_markup: {
        inline_keyboard: [
          ...rawButtons,
          ...[
            [
              { 
                text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥‚¨ÖÔ∏è', 
                callback_data: 'back',
              },
            ],
          ],
        ],
      },
    };
  }

  async manageKeysKeyboard(tg: string): Promise<Keyboard> {
    const authorizedUser = await this.authorizedUserService.findByTg(tg);
    let buttons = [];
    let keys: Key[] = [];
    if (authorizedUser) {
      keys = authorizedUser.keys;

      keys.map((key) => {
        const to = new Date(key.to);
        const now = new Date();
        const diffInMilliSeconds = to.getTime() - now.getTime();
        const diffInDays = diffInMilliSeconds / (1000 * 60 * 60 * 24);
        const dif = Math.floor(diffInDays);

        buttons.push([
          {
            text: `IPv${this.netTools.checkIpVersion(key.proxy_list[0])} - ${key.tariff.emoji} - ${key.tariff.subnet} - ${key.tariff.tcp} tcp - ${dif}d`, 
            callback_data: `manage-${key.id}`, 
          },
        ]);
    
      });

    } else {
      const nonAuthorizedUser = await this.nonAuthorizedUserService.findByTg(tg);
      keys = this.keyTools.deserializeKeysWithNewDate(nonAuthorizedUser);
      
      keys.map((key) => {

        buttons.push([
          {
            text: `üîë‚õîÔ∏è - IPv${this.netTools.checkIpVersion(key.proxy_list[0])} - ${key.tariff.emoji} - ${key.tariff.subnet} - ${key.tariff.tcp} tcp`, 
            callback_data: `manage-0`, 
          },
        ]);
    
      });
    }


    return {
      reply_markup: {
        inline_keyboard: [
          ...buttons,
          ...[
            [
              { 
                text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥‚¨ÖÔ∏è', 
                callback_data: 'back',
              }
            ],
          ],
        ],
      },
    };
  }

  manageKeyKeyboard(key: Key): Keyboard {
    let changeAuthMethodText: string;
    let changeAuthMethodCallback: string;
    if (key.authMethod === 0) {
      changeAuthMethodText = '–°–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å';
      changeAuthMethodCallback = `keyManage-${key.id}-changeAuthMethod-1`;
    } else {
      changeAuthMethodText = '–°–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ IP';
      changeAuthMethodCallback = `keyManage-${key.id}-changeAuthMethod-0`;
    }
    
    return {
      reply_markup: {
        inline_keyboard: [
          [
            { 
              text: changeAuthMethodText, 
              callback_data: changeAuthMethodCallback,
            },
          ],
          [
            { 
              text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π',
              callback_data: `keyManage-${key.id}-getStats`, 
            },
          ],
          [
            {
              text: '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ —Å–ø–∏—Å–æ–∫',
              callback_data: `keyManage-${key.id}-getProxyList`
            },
          ],
          [
            { 
              text: '–ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á', 
              callback_data: `keyManage-${key.id}-extendSubscribe` 
            },
          ],
          [
            { 
              text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', 
              callback_data: 'manageKeys' 
            },
          ],
        ],
      },
    };
  }

  pickAuthMethod(key: Key): Keyboard {
    return {
      reply_markup: {
        inline_keyboard: [
          [
            { 
              text: '–ß–µ—Ä–µ–∑ IP', 
              callback_data: `keyManage-${key.id}-changeAuthMethod-0` 
            },
            {
              text: '–ß–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å', 
              callback_data: `keyManage-${key.id}-changeAuthMethod-1` 
            },
          ],
        ],
      },
    };
  } 

  backToKeySettingsKeyboard(key: Key): Keyboard {
    return {
      reply_markup: {
        inline_keyboard: [
          [
            { 
              text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', 
              callback_data: `manage-${key.id}` 
            },
          ],
        ],
      },
    };
  }

  pickDaysToExtendSubscribeKeyboard(key: Key): Keyboard {
    return {
      reply_markup: {
        inline_keyboard: [
          [
            { 
              text: '7 –¥–Ω–µ–π', 
              callback_data: `keyManage-${key.id}-extendSubscribe-7`, 
            },
            { 
              text: '14 –¥–Ω–µ–π', 
              callback_data: `keyManage-${key.id}-extendSubscribe-14`, 
            },
            { 
              text: '30 –¥–Ω–µ–π', 
              callback_data: `keyManage-${key.id}-extendSubscribe-30`, 
            },
          ],
          [
            { 
              text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', 
              callback_data: `manage-${key.id}`, 
            },
          ],
        ],
      },
    };
  }
}
