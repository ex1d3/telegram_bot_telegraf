import { TariffService } from "../services/tariff.service";
import { AuthorizedUserService } from "../services/authorizedUser.service";
import { Key } from "../entity/key.entity";
import { Tariff } from "../entity/tariff.entity";
import { NonAuthorizedUserService } from "../services/nonAuthorizedUser.service";
import { KeyTools } from "../tools/key.tools";

export class DynamicMessages {
  private readonly authorizedUserService: AuthorizedUserService = new AuthorizedUserService();
  private readonly nonAuthorizedUserService: NonAuthorizedUserService = new NonAuthorizedUserService();
  private readonly keyTools: KeyTools = new KeyTools();
  
  async startMessage(tg: string): Promise<string> {
    const authorizedUser = await this.authorizedUserService.findByTg(tg);
    
    if (authorizedUser) {
      let tariffStatus;
      if (authorizedUser.keys.length !== 0) {
        tariffStatus = '–ê–∫—Ç–∏–≤–µ–Ω';
      } else {
        tariffStatus = '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω';
      }
    
      return `E-mail: ${authorizedUser.email}\nüë§ID: ${authorizedUser.tg}\nüí∞–ë–∞–ª–∞–Ω—Å: ${authorizedUser.balance} —Ä—É–±.\nüîê–¢–∞—Ä–∏—Ñ: ${tariffStatus}`;
    } else {
      const nonAuthorizedUser = await this.nonAuthorizedUserService.findByTg(tg);
      let tariffStatus;
      if (nonAuthorizedUser.keys !== undefined) {
        if (nonAuthorizedUser.keys.length > 0) {
          tariffStatus = '–ê–∫—Ç–∏–≤–µ–Ω';
        } else {
          tariffStatus = '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω';
        }
      } else {
        tariffStatus = '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω';
      }

      return `E-mail: –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\nüë§ID: ${tg}\nüí∞–ë–∞–ª–∞–Ω—Å: ${nonAuthorizedUser.balance} —Ä—É–±.\nüîê–¢–∞—Ä–∏—Ñ: ${tariffStatus}`;
    }
  }
    
  tariffDataMessage(tariff: Tariff): string {
    return `${tariff.name}\n${tariff.description}\n\n–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ?`;
  }

  manageKeyMessage(key: Key): string {
    const to = this.keyTools.getUTCDate(new Date(key.to))
    let authMethod: string;

    if(key.authMethod === 0) {
      authMethod = 'IP'
    } else {
      authMethod = '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å'
    }

    return `–ö–ª—é—á: ${key.uid}\n–¢–∞—Ä–∏—Ñ: ${key.tariff.name}\n–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: ${to} UTC\n–¢–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authMethod}\n–õ–∏–º–∏—Ç TCP: ${key.tariff.tcp}`
  }

  getProxyListMessage(key: Key): string {
    const rawProxyList = key.proxy_list;
    let messageToSend: string = '–í–∞—à –ø—Ä–æ–∫—Å–∏ –ª–∏—Å—Ç:\n';
    rawProxyList.forEach((ip) => {
      messageToSend = messageToSend + ip + '\n';
    })

    return messageToSend;
  }

  pickDaysToExtendSubscribeMessage(key: Key): string {
    return `–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Å–≤–æ–π –∫–ª—é—á.\n–õ–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ /extendSubscribe ${key.uid} [–ñ–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è]`;
  }
}